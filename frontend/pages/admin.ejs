<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="/admin.css">
    <title>Document</title>
</head>
<body>
  <!-- Sidebar on the left -->
<!-- Sidebar -->
<div class="sidebar">
  <img src="/images/Cineverse_logo-removebg1.png" alt="Cineverse Logo" />
  <ul>
    <li onclick="showSection('dashboard')">Dashboard</li>
    <li onclick="showSection('movies')">Movie Management</li>
    <li onclick="showSection('users')">User Management</li>
    <!--li onclick="showSection('analytics')">Analytics</li-->
    <li onclick="logout()">Logout</li>
  </ul>
</div>

<div class="main-content">
  <div id="dashboard" class="section">
    <h1 id="Dashboard-overview">Dashboard Overview</h1>
    <div class="dashboard-cards-container">
    <div class="dashboard-card">
      <h2>Total Movies</h2>
      <p><%= movieCount %></p>
    </div>
    <div class="dashboard-card">
      <h2>Users</h2>
      <p><%= userCount %></p>
    </div>
    <!--div class="dashboard-card"-->
      <!--h2>Reviews</!--h2-->
      <!--p><%= reviewCount %></!--p-->
    <!--/!--div-->
    </div>
    <div class="recent-activity">
    <h2>Recent Activity</h2>
    <div class="activity-controls">
      <button id="load-more-activities" class="admin-buttons">Load More</button>
    </div>
    <table>
      <thead>
        <tr>
          <th>User</th>
          <th>Email</th>
          <th>Action</th>
          <th>Details</th>
          <th>Time</th>
        </tr>
      </thead>
      <tbody id="activities-table-body">
        <% if (typeof recentActivities !== 'undefined' && recentActivities.length > 0) { %>
          <% recentActivities.forEach(activity => { %>
            <tr>
              <td><%= activity.user ? activity.user.fullname : 'Unknown User' %></td>
              <td><%= activity.user ? activity.user.email : 'N/A' %></td>
              <td><span class="activity-action"><%= activity.action ? activity.action.replace('_', ' ') : 'Unknown Action' %></span></td>
              <td><%= activity.details || 'No details' %></td>
              <td><%= activity.timestamp ? new Date(activity.timestamp).toLocaleString() : 'N/A' %></td>
            </tr>
          <% }); %>
        <% } else { %>
          <tr>
            <td colspan="5" style="text-align: center;">No recent activities</td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  </div>

  

  <!-- Movie Management -->
  <div id="movies" class="section" style="display: none;">
    <h1>Movie Management</h1>
    <button class="admin-buttons" onclick="showAdminMovieForm('add')">Add Movie</button>
    <button class="admin-buttons" onclick="showAdminMovieForm('remove')">Remove Movie</button>
    <button class="admin-buttons" onclick="showAdminMovieForm('update')">Update Movie</button>

    <form id="add-form" action="/movies/add" method="POST" style="display: none;"> <!--el action attribute bet7aded el url el el form data should be sent when the form is submitted-->
      <h1 class="admin-header">Add Movie</h1>
        <div class="input-control">
            <label for="addmovie-title">Title</label>
            <input type="text" id="addmovie-title" name="addmovie-title" required>
        </div>
        <fieldset id="addmovie-genres">
            <legend>Genres</legend>
            <label><input type="checkbox" name="genre" value="Action"> Action</label><br>
            <label><input type="checkbox" name="genre" value="Mystery"> Mystery</label><br>
            <label><input type="checkbox" name="genre" value="Family"> Family</label><br>
            <label><input type="checkbox" name="genre" value="Thriller"> Thriller</label><br>
            <label><input type="checkbox" name="genre" value="Horror"> Horror</label><br>
            <label><input type="checkbox" name="genre" value="Musical"> Musical</label><br>
            <label><input type="checkbox" name="genre" value="Fantasy"> Fantasy</label><br>
            <label><input type="checkbox" name="genre" value="Crime"> Crime</label><br>
            <label><input type="checkbox" name="genre" value="Comedy"> Comedy</label><br>
            <label><input type="checkbox" name="genre" value="Drama"> Drama</label><br>
            <label><input type="checkbox" name="genre" value="Sci-Fi"> Sci-Fi</label><br>
            <label><input type="checkbox" name="genre" value="Animation"> Animation</label><br>
            <label><input type="checkbox" name="genre" value="Romance"> Romance</label><br>
            <label><input type="checkbox" name="genre" value="Adventure"> Adventure</label><br>
        </fieldset>
        <div class="input-control">
            <label for="addmovie-year">Release Year</label>
            <input type="text" id="addmovie-year" name="addmovie-year" required>
        </div>
        <div class="input-control">
            <label for="addmovie-age">Age Rating</label>
            <input type="text" id="addmovie-age" name="addmovie-age" required>
        </div>
        <div class="input-control">
            <label for="addmovie-image">Poster Link</label>
            <input type="text" id="addmovie-image" name="addmovie-image" required>
        </div>
        <div class="input-control">
            <label for="addmovie-trailer">Trailer Link</label>
            <input type="text" id="addmovie-trailer" name="addmovie-trailer" required>
        </div>
        <div class="input-control">
            <label for="addmovie-description">Description:</label>
            <textarea id="addmovie-description" name="addmovie-description" rows="10" cols="130" required></textarea>
        </div>
        <button type="submit" class="admin-buttons">Add</button>
    </form>

    <form id="remove-form" action="/movies/remove" method="POST" style="display: none;">
      <h1 class="admin-header">Remove Movie</h1>
        <div class="input-control">
            <label for="removemovie-id">Movie ID</label>
            <input type="text" id="removemovie-id" name="removemovie-id" required>
        </div>
        <button type="submit" class="admin-buttons">Delete</button>
    </form>

    <form id="update-form" action="/movies/update" method="POST" style="display: none;">
      <h1 class="admin-header">Update Movie</h1>
        <div class="input-control">
            <label for="updatemovie-id">Movie ID</label>
            <input type="text" id="updatemovie-id" name="updatemovie-id" required>
        </div>
        <fieldset id="updatemovie-genres">
            <legend>Genres</legend>
            <label><input type="checkbox" name="genre" value="Action"> Action</label><br>
            <label><input type="checkbox" name="genre" value="Mystery"> Mystery</label><br>
            <label><input type="checkbox" name="genre" value="Family"> Family</label><br>
            <label><input type="checkbox" name="genre" value="Thriller"> Thriller</label><br>
            <label><input type="checkbox" name="genre" value="Horror"> Horror</label><br>
            <label><input type="checkbox" name="genre" value="Musical"> Musical</label><br>
            <label><input type="checkbox" name="genre" value="Fantasy"> Fantasy</label><br>
            <label><input type="checkbox" name="genre" value="Crime"> Crime</label><br>
            <label><input type="checkbox" name="genre" value="Comedy"> Comedy</label><br>
            <label><input type="checkbox" name="genre" value="Drama"> Drama</label><br>
            <label><input type="checkbox" name="genre" value="Sci-Fi"> Sci-Fi</label><br>
            <label><input type="checkbox" name="genre" value="Animation"> Animation</label><br>
            <label><input type="checkbox" name="genre" value="Romance"> Romance</label><br>
            <label><input type="checkbox" name="genre" value="Adventure"> Adventure</label><br>
        </fieldset>
        <div class="input-control">
            <label for="updatemovie-year">Release Year</label>
            <input type="text" id="updatemovie-year" name="updatemovie-year" required>
        </div>
        <div class="input-control">
            <label for="updatemovie-age">Age Rating</label>
            <input type="text" id="updatemovie-age" name="updatemovie-age" required>
        </div>
        <div class="input-control">
            <label for="updatemovie-image">Poster Link</label>
            <input type="text" id="updatemovie-image" name="updatemovie-image" required>
        </div>
        <div class="input-control">
            <label for="updatemovie-trailer">Trailer Link</label>
            <input type="text" id="updatemovie-trailer" name="updatemovie-trailer" required>
        </div>
        <div class="input-control">
            <label for="updatemovie-description">Description:</label>
            <textarea id="updatemovie-description" name="updatemovie-description" rows="10" cols="130" required></textarea>
        </div>
        <button type="submit" class="admin-buttons">Update</button>
    </form>
  </div>

  <!-- User Management -->
  <div id="users" class="section" style="display: none;">
    <h1>User Management</h1>
    <div class="user-management-container">
      <!-- User List Table -->
      <div class="user-list">
        <h2>All Users</h2>
        <div class="table-container">
          <table id="users-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>Admin</th>
                <th>Joined</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="users-table-body">
              <!-- Users will be populated here dynamically -->
            </tbody>
          </table>
        </div>
      </div>

      <!-- Edit User Form -->
      <div id="edit-user-form" class="edit-form" style="display: none;">
        <h2>Edit User</h2>
        <form id="update-user-form">
          <input type="hidden" id="edit-user-id">
          <div class="form-group">
            <label for="edit-fullname">Full Name</label>
            <input type="text" id="edit-fullname" name="fullname" required>
          </div>
          <div class="form-group">
            <label for="edit-username">Username</label>
            <input type="text" id="edit-username" name="username" required>
          </div>
          <div class="form-group">
            <label for="edit-email">Email</label>
            <input type="email" id="edit-email" name="email" required>
          </div>
          <div class="form-group checkbox-group">
            <label>
              <input type="checkbox" id="edit-isAdmin" name="isAdmin">
              Admin Status
            </label>
          </div>
          <div class="form-actions">
            <button type="submit" class="admin-buttons">Save Changes</button>
            <button type="button" class="admin-buttons cancel-btn" onclick="hideEditForm()">Cancel</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Analytics -->
  <!--div id="analytics" class="section" style="display: none;"-->
    <!--h1>Analytics</!--h1-->
  <!--/!--div-->
<!--/div-->



<script>
  // Global variables for pagination
let currentPage = 1;
const activitiesPerPage = 10;

// Function to show/hide movie management forms
function showAdminMovieForm(formType) {
    // Hide all forms first
    document.getElementById('add-form').style.display = 'none';
    document.getElementById('remove-form').style.display = 'none';
    document.getElementById('update-form').style.display = 'none';

    // Show the selected form
    if (formType === 'add') {
        document.getElementById('add-form').style.display = 'block';
    } else if (formType === 'remove') {
        document.getElementById('remove-form').style.display = 'block';
    } else if (formType === 'update') {
        document.getElementById('update-form').style.display = 'block';
    }
}

function showSection(id) {
    // Hide all sections
    document.querySelectorAll('.section').forEach(section => {
        section.style.display = 'none';
    });
    
    // Remove active class from all menu items
    document.querySelectorAll('.sidebar ul li').forEach(item => {
        item.classList.remove('active');
    });
    
    // Add active class to clicked menu item
    const activeItem = document.querySelector(`.sidebar ul li[onclick="showSection('${id}')"]`);
    if (activeItem) {
        activeItem.classList.add('active');
    }
    
    // Show the selected section
    document.getElementById(id).style.display = 'block';
    
    // Load users if the user management section is shown
    if (id === 'users') {
        loadUsers();
    }
    
    // Load activities if the dashboard is shown
    if (id === 'dashboard') {
        loadRecentActivities();
    }
}

function logout() {
    window.location.href = '/';
}

//frontend and backend connection function for the add movie feature
document.getElementById('add-form').addEventListener('submit', async (e) => {
        e.preventDefault();

        const name = document.getElementById('addmovie-title').value;
        const genreCheckboxes = document.querySelectorAll('input[name="genre"]:checked');
        const genres = Array.from(genreCheckboxes).map(cb => cb.value);
        const releaseYear = document.getElementById('addmovie-year').value;
        const ageRating = document.getElementById('addmovie-age').value;
        const image = document.getElementById('addmovie-image').value;
        const trailer = document.getElementById('addmovie-trailer').value;
        const description = document.getElementById('addmovie-description').value;

        try {
            const res = await fetch('http://localhost:5000/admin/movies/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({name, genres, releaseYear, ageRating, image, trailer, description})
            });

            const data = await res.json();

            if (res.ok) {
                alert('Movie added successfully!');
                document.getElementById('add-form').reset();
            } else {
                alert(`Movie addition failed: ${data.message}`);
            }
        } catch (err) {
            alert('Something went wrong!');
            console.error(err);
        }
    });

    //frontend and backend connection function for the remove movie feature
    document.getElementById('remove-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const movieId = document.getElementById('removemovie-id').value.trim();

        try {
            const res = await fetch(`http://localhost:5000/admin/movies/${movieId}`, {
               method: 'DELETE'
            });

            const data = await res.json();

            if (res.ok) {
                alert('Movie deleted successfully!');
                document.getElementById('remove-form').reset();
            } else {
                alert(`Movie deletion failed: ${data.message}`);
            }
        } catch (err) {
            alert('Something went wrong!');
            console.error(err);
        }
    });

    //frontend and backend connection function for the update movie feature
    document.getElementById('update-form').addEventListener('submit', async (e) => {
        e.preventDefault();

        const movieId = document.getElementById('updatemovie-id').value.trim();
        const genreCheckboxes = document.querySelectorAll('input[name="genre"]:checked');
        const genres = Array.from(genreCheckboxes).map(cb => cb.value);
        const releaseYear = document.getElementById('updatemovie-year').value;
        const ageRating = document.getElementById('updatemovie-age').value;
        const image = document.getElementById('updatemovie-image').value;
        const trailer = document.getElementById('updatemovie-trailer').value;
        const description = document.getElementById('updatemovie-description').value;

        try {
            const res = await fetch(`http://localhost:5000/admin/movies/${movieId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({genres, releaseYear, ageRating, image, trailer, description})
            });

            const data = await res.json();

            if (res.ok) {
                alert('Movie updated successfully!');
                document.getElementById('update-form').reset();
            } else {
                alert(`Movie updating failed: ${data.message}`);
            }
        } catch (err) {
            alert('Something went wrong!');
            console.error(err);
        }
    });

// User Management Functions
async function loadUsers() {
    try {
        const response = await fetch('/admin/users', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const users = await response.json();
        if (!Array.isArray(users)) {
            throw new Error('Invalid response format');
        }

        displayUsers(users);
    } catch (error) {
        console.error('Error loading users:', error);
        const tbody = document.getElementById('users-table-body');
        tbody.innerHTML = `<tr><td colspan="7" style="text-align: center; color: red;">Error loading users: ${error.message}</td></tr>`;
    }
}

function displayUsers(users) {
    const tbody = document.getElementById('users-table-body');
    tbody.innerHTML = '';

    if (users.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" style="text-align: center;">No users found</td></tr>';
        return;
    }

    users.forEach(user => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${user.fullname || 'N/A'}</td>
            <td>${user.username || 'N/A'}</td>
            <td>${user.email || 'N/A'}</td>
            <td>${user.isAdmin ? 'Yes' : 'No'}</td>
            <td>${user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}</td>
            <td class="action-buttons">
                <button class="edit-btn" onclick="showEditForm('${user._id}')">Edit</button>
                <button class="delete-btn" onclick="deleteUser('${user._id}')">Delete</button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

async function showEditForm(userId) {
    try {
        console.log('Fetching user details for ID:', userId);
        const response = await fetch(`/admin/users/${userId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const user = await response.json();
        console.log('Received user data:', user);
        
        // Populate the form with user data
        document.getElementById('edit-user-id').value = user._id;
        document.getElementById('edit-fullname').value = user.fullname || '';
        document.getElementById('edit-username').value = user.username || '';
        document.getElementById('edit-email').value = user.email || '';
        document.getElementById('edit-isAdmin').checked = user.isAdmin || false;

        // Show the edit form
        const editForm = document.getElementById('edit-user-form');
        editForm.style.display = 'block';
        
        // Scroll to the form
        editForm.scrollIntoView({ behavior: 'smooth' });
    } catch (error) {
        console.error('Error loading user details:', error);
        alert('Error loading user details: ' + error.message);
    }
}

function hideEditForm() {
    const editForm = document.getElementById('edit-user-form');
    editForm.style.display = 'none';
    // Clear form fields
    document.getElementById('edit-user-id').value = '';
    document.getElementById('edit-fullname').value = '';
    document.getElementById('edit-username').value = '';
    document.getElementById('edit-email').value = '';
    document.getElementById('edit-isAdmin').checked = false;
}

// Add event listener for the update form
document.addEventListener('DOMContentLoaded', function() {
    const updateForm = document.getElementById('update-user-form');
    if (updateForm) {
        updateForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const userId = document.getElementById('edit-user-id').value;
            
            const userData = {
                fullname: document.getElementById('edit-fullname').value,
                username: document.getElementById('edit-username').value,
                email: document.getElementById('edit-email').value,
                isAdmin: document.getElementById('edit-isAdmin').checked
            };

            try {
                console.log('Updating user:', userId, 'with data:', userData);
                const response = await fetch(`/admin/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(userData)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                alert(result.message || 'User updated successfully!');
                hideEditForm();
                loadUsers(); // Refresh the user list
            } catch (error) {
                console.error('Error updating user:', error);
                alert('Error updating user: ' + error.message);
            }
        });
    } else {
        console.error('Update form not found in the DOM');
    }
});

async function deleteUser(userId) {
    if (!confirm('Are you sure you want to delete this user?')) {
        return;
    }

    try {
        const response = await fetch(`/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        alert(result.message || 'User deleted successfully!');
        loadUsers();
    } catch (error) {
        console.error('Error deleting user:', error);
        alert('Error deleting user: ' + error.message);
    }
}

// Add click handlers for dashboard cards
document.addEventListener('DOMContentLoaded', function() {
    const totalMoviesCard = document.querySelector('.dashboard-card:nth-child(1)');
    const usersCard = document.querySelector('.dashboard-card:nth-child(2)');
    const reviewsCard = document.querySelector('.dashboard-card:nth-child(3)');

    if (totalMoviesCard) {
        totalMoviesCard.addEventListener('click', () => showSection('movies'));
    }
    if (usersCard) {
        usersCard.addEventListener('click', () => showSection('users'));
    }
    if (reviewsCard) {
        reviewsCard.addEventListener('click', () => showSection('analytics'));
    }
});

// Function to load recent activities
let currentActivityPage = 1;

async function loadRecentActivities(loadMore = false) {
    try {
        if (!loadMore) {
            currentPage = 1;
        }

        const response = await fetch(`/admin/activities?page=${currentPage}&limit=${activitiesPerPage}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const activities = await response.json();
        displayActivities(activities, loadMore);

        // Update load more button visibility
        const loadMoreBtn = document.getElementById('load-more-activities');
        if (loadMoreBtn) {
            loadMoreBtn.style.display = activities.length === activitiesPerPage ? 'block' : 'none';
        }
    } catch (error) {
        console.error('Error loading activities:', error);
        const tbody = document.getElementById('activities-table-body');
        tbody.innerHTML = `<tr><td colspan="5" style="text-align: center; color: red;">Error loading activities: ${error.message}</td></tr>`;
    }
}

function displayActivities(activities, append = false) {
    const tbody = document.getElementById('activities-table-body');
    
    if (!append) {
        tbody.innerHTML = '';
    }

    if (activities.length === 0 && !append) {
        tbody.innerHTML = '<tr><td colspan="5" style="text-align: center;">No recent activities</td></tr>';
        return;
    }

    activities.forEach(activity => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${activity.user ? activity.user.fullname : 'Unknown User'}</td>
            <td>${activity.user ? activity.user.email : 'N/A'}</td>
            <td><span class="activity-action">${activity.action ? activity.action.replace(/_/g, ' ') : 'Unknown Action'}</span></td>
            <td>${activity.details || 'No details'}</td>
            <td>${activity.timestamp ? new Date(activity.timestamp).toLocaleString() : 'N/A'}</td>
        `;
        tbody.appendChild(tr);
    });

    if (append) {
        currentPage++;
    }
}

// Add event listener for load more button
document.addEventListener('DOMContentLoaded', function() {
    const loadMoreBtn = document.getElementById('load-more-activities');
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => loadRecentActivities(true));
    }
});

// Refresh activities every 30 seconds
setInterval(() => loadRecentActivities(false), 30000);
</script>

  <script src="/scripts/app.js"></script>
  <!--script src="/scripts/admin.js"></!--script-->
</body>
</html>